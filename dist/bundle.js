/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("'use script';\r\n\r\nconst enter = document.querySelector('.enter')\r\nconst add = document.querySelector('.add')\r\nconst none = document.querySelector('.none')\r\nconst your = document.querySelector('.your')\r\nconst inside = document.querySelector('.inside')\r\nconst tasks = document.querySelector('.tasks')\r\nconst overlay = document.querySelector('.overlay')\r\nconst suc = document.querySelector('.suc')\r\nconst ted2 = document.querySelector('.ted2')\r\nconst ted = document.querySelector('.ted')\r\nconst whole = document.querySelector('.whole')\r\nconst add2 = document.querySelector('.search')\r\nconst adds = document.querySelector('.adds')\r\nconst amend = document.querySelector('.amend')\r\nconst contact = add2.lastChild\r\nconst dateNow = new Date();\r\n\r\nlet dataValue = 0;\r\nlet dataValue2 = 0;\r\nlet control = function(){\r\n    const task = `\r\n    <div class=\"eachTask \" data-index = ${dataValue}>\r\n        <div class=\"first1\"><p class=\"ent\">${enter.value}</p>\r\n            <p class=\"first2\">${dateNow.getDate()}/${dateNow.getMonth() + 1}/${dateNow.getFullYear()}</p>\r\n        </div>\r\n        <div class=\"times\">\r\n            <img src=\"/edit2.png\" alt=\"\" class=\"edit2\">\r\n            <img class =\"bin\" src=\"/trash.png\" alt=\"\">\r\n        </div>\r\n    </div>`;\r\n    const read = `<button class=\"rem\">Edit Task</button>`\r\n    const amendment = `\r\n        <div class=\"shadow\">\r\n            <div class=\"inq\">\r\n                <div class=\"time\">&times;</div>\r\n                <p class=\"del\">DELETE TASK</p>\r\n                <p class=\"con\">ARE YOU SURE YOU WANT TO DELETE THIS TASK ?</p>\r\n                <div class=\"buttons\">\r\n                    <div class=\"but\">\r\n                        <button class=\"yes\">YES</button>\r\n                        <button class=\"no\">NO</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>`\r\n    const orig = `<button class=\"add\">Add Task</button>`\r\n    dataValue++;\r\n    whole.insertAdjacentHTML(\"beforeend\", task)\r\n    enter.value = ''\r\n    inside.classList.add('bod')\r\n    setTimeout(() => {ted.classList.remove('non')}, 500);\r\n    setTimeout(() => {ted.classList.add('non')}, 1000);\r\n    const binAll = document.querySelectorAll('.bin');\r\n    let currentBtn;\r\n    binAll.forEach((bin) => {\r\n        bin.addEventListener('click', (e) => {\r\n            e.stopImmediatePropagation();\r\n            // const parentVal = bin.parentElement.parentElement.dataset.index\r\n            // enter.value = parentVal\r\n            // .Remove()  or .RemoveChild() ...\r\n            currentBtn = bin.parentElement.parentElement;\r\n            overlay.classList.remove('none')\r\n            amend.classList.remove('non')\r\n            amend.innerHTML = amendment\r\n            const yes = document.querySelector('.yes')\r\n            const no = document.querySelector('.no')\r\n            const shadow = document.querySelector('.shadow')\r\n            const time = document.querySelector('.time')\r\n            yes.addEventListener('click', () => {\r\n                currentBtn.remove();\r\n                setTimeout(() => {suc.classList.remove('non')}, 500);\r\n                setTimeout(() => {suc.classList.add('non')}, 1000)\r\n                shadow.remove()\r\n                overlay.classList.add('none')\r\n                amend.classList.add('non')\r\n            })\r\n            no.addEventListener('click', function(){\r\n                shadow.remove()\r\n                overlay.classList.add('none')\r\n                amend.classList.add('non')\r\n            })\r\n            time.addEventListener('click', function(){\r\n                shadow.remove()\r\n                overlay.classList.add('none')\r\n                amend.classList.add('non')\r\n            })\r\n        })\r\n    })\r\n    const editAll = document.querySelectorAll('.edit2');\r\n    editAll.forEach((edit) => {\r\n        edit.addEventListener('click', (e) => {\r\n            e.stopImmediatePropagation();\r\n            currentBtn = edit.parentElement.parentElement;\r\n            const reach = currentBtn.querySelector('.ent')\r\n            enter.value = reach.textContent\r\n            add.remove();\r\n            adds.innerHTML = read\r\n            const rem = document.querySelector('.rem')\r\n            reach.classList.add('extra')\r\n            rem.addEventListener('click', function(){\r\n                reach.textContent = enter.value\r\n                rem.remove();\r\n                adds.innerHTML = orig\r\n                const adding = document.querySelector('.add')\r\n                adding.addEventListener('click', function(){\r\n                    if(enter.value !== ''){\r\n                        control();\r\n                    }\r\n                })\r\n                ted.textContent = 'Task has been edited successfully'\r\n                enter.value = ''\r\n                setTimeout(() => {ted.classList.remove('non')}, 500);\r\n                setTimeout(() => {ted.classList.add('non')}, 1000); \r\n                reach.classList.remove('extra') \r\n            })\r\n        })\r\n    })\r\n}\r\nadd.addEventListener('click', function(){\r\n    if(enter.value !== ''){\r\n        control();\r\n    }\r\n})\n\n//# sourceURL=webpack://task-manager-pro/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;